datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//---------------------------generator----------------------------------

generator client {
  provider = "prisma-client-js"
}

// generator custom_generator {
//   provider = "prisma-generator-fake-data"
//   output   = "./fake-data.ts"
// }

// generator nestgraphql {
//   provider                              = "node node_modules/prisma-nestjs-graphql"
//   output                                = "../src/@generated"
//   reExport                              = Single
//   fields_Validator_from                 = "class-validator"
//   fields_Validator_input                = true
//   requireSingleFieldsInWhereUniqueInput = true
//   emitSingle                            = true
//   emitCompiled                          = true
//   purgeOutput                           = true
//   noTypeId                              = true
// }

//---------------------------------address----------------------------------

//CRUD for UI
/// Address adalah alamat dari user dan cabang
model Address {
  //-------------------------- scalars --------------------------------
  id Int @id @default(autoincrement())

  latitude Float? //for google map

  longitude Float? //for google map

  label String

  street String

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------
  Branch Branch?

  user User? @relation(fields: [userId], references: [id])

  userId String?

  /// @Validator.IsNotEmpty()
  subdistrict Subdistrict @relation("SubdistrictAddress", fields: [subdistrictId], references: [id])

  // @HideField({ match: 'AddressCreate*Input' })
  subdistrictId Int

  //-------------------------- m relations --------------------------------

  platformOrder PlatformOrder[]

  serviceOrder ServiceOrder[]

  @@map("Addresses")
}

model Province {
  id Int @id @default(autoincrement())

  name String @unique

  /// @HideField()   
  cities City[]
}

//Make CRUD Available
model City {
  id Int @id @default(autoincrement())

  name String

  province Province @relation(fields: [provinceId], references: [id])

  provinceId Int

  districts District[]
}

//Make CRUD Available
model District {
  id Int @id @default(autoincrement())

  name String

  city City @relation(fields: [cityId], references: [id])

  cityId Int

  subdistricts Subdistrict[]
}

model Subdistrict {
  id Int @id @default(autoincrement())

  name String

  district District @relation(fields: [districtId], references: [id])

  districtId Int

  postalCode String

  /// @HideField()
  address Address[] @relation("SubdistrictAddress")
}

//-----------------------------------User--------------------------------------------

//CRUD for UI
///User terdiri dari 4 role, Owner, Employee, Customer, SuperUser
///Properti tiap role berbeda-beda, sehingga dibuat tabel terpisah
model User {
  //-------------------------- scalars --------------------------------

  id String @id @default(uuid())

  fullName String

  username String @unique

  email String @unique

  emailVerifiedAt DateTime?

  password String

  whatsapp String @unique

  whatsappVerifiedAt DateTime?

  birthDate DateTime

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  deletedAt DateTime? //implement softdelete

  //-------------------------- 1 relations --------------------------------

  PhoneCountryCode PhoneCountryCode @relation(fields: [phoneCountryCodeId], references: [phoneCode])

  phoneCountryCodeId Int

  role UserRole

  gender Gender

  avatarImage Image @relation(fields: [avatarImageId], references: [url])

  avatarImageId String

  customerInfo Customer?

  customerInfoId String?

  employeeInfo Employee?

  employeeInfoId String?

  ownerInfo Owner?

  ownerInfoId String?

  language Language @default(ID)

  theme Theme @default(LIGHT)

  ChatRoom ChatRoom? @relation(fields: [chatRoomId], references: [id])

  chatRoomId Int?

  //-------------------------- m relations --------------------------------

  accounts Account[]

  addresses Address[]

  sessions Session[]

  notifications Notification[]

  changedStatuses OrderStatus[]

  messageSender Message[] @relation("MessageSender")

  messageReceiver Message[] @relation("MessageReceiver")

  @@map("users")
}

enum UserRole {
  OWNER
  EMPLOYEE
  CUSTOMER
  SUPERUSER

  @@map("UserRoles")
}

model Image {
  //-------------------------- scalars --------------------------------

  url String @id

  /// @HideField({ match: ['ImagesCreate*Input','ImagesUpdate*Input']})
  fileType FileType?

  /// @Validator.IsNumber() 
  /// @HideField({ match: ['ImagesCreate*Input','ImagesUpdate*Input']})
  fileSize Float?

  /// @HideField({ match: ['ImagesCreate*Input','ImagesUpdate*Input']})
  createdAt DateTime @default(now())

  //-------------------------- 1 relations --------------------------------

  PlatformItem PlatformItem? @relation(fields: [platformItemId], references: [id])

  platformItemId String?

  LaundryItem LaundryItem? @relation(fields: [laundryItemId], references: [id])

  laundryItemId Int?

  //-------------------------- m relations --------------------------------

  User User[]

  Branch Branch[]

  Review Review[]

  Machine Machine[]

  BranchLaundryItemService BranchLaundryItemService[]

  Transaction Transaction[]

  @@map("Images")
}

enum FileType {
  UNKNOWN
  MP4
  JPG
  PNG
  PDF

  @@map("FileTypes")
}

//No CRUD for UI
//CRUD for superUser
model PhoneCountryCode {
  phoneCode Int    @id
  country   String
  User      User[]

  @@map("PhoneCountryCodes")
}

//No CRUD for UI
//Read Only for SuperUser
model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  device    String
  ipAddress Float
  createdAt DateTime @default(now())
}

enum Gender {
  MALE
  FEMALE
}

enum Theme {
  LIGHT
  DARK
}

enum Language {
  ID
  EN
}

//CRUD for UI
model Owner {
  //-------------------------- scalars --------------------------------

  createdAt DateTime @default(now())

  updatedAt DateTime

  //-------------------------- 1 relations --------------------------------

  user User @relation(fields: [userId], references: [id])

  userId String @id

  //-------------------------- m relations --------------------------------

  creditCard CreditCard[]

  platformOrders PlatformOrder[]

  /// 1 Owner dapat memiliki banyak cabang
  branches           Branch[]
  LaundryItemRequest LaundryItemRequest[]

  @@map("Owners")
}

//CRUD for UI
/// Customer adalah user yang menggunakan jasa laundry
/// Customer bisa mereferensikan customer lain dan mendapatkan komisi
/// Customer bisa mendapatkan poin dari setiap transaksi
/// Customer bisa menukarkan poin dengan voucher
model Customer {
  //-------------------------- scalars --------------------------------

  user User @relation(fields: [userId], references: [id])

  userId String @id

  createdAt DateTime @default(now())

  updatedAt DateTime

  ///auto generate dari backend
  referralCode String @unique

  //-------------------------- 1 relations --------------------------------

  referredBy Customer? @relation("CustomerReferral", fields: [referredById], references: [userId])

  /// @HideField({ output: false, input: true })   
  referredById String?

  //-------------------------- m relations --------------------------------

  orders ServiceOrder[]

  favoriteBranches Branch[]

  reviews Review[]

  creditCards CreditCard[]

  referredUsers Customer[] @relation("CustomerReferral")

  @@map("customers")
}

//CRUD for UI
/// Employee adalah user yang bekerja di cabang
/// Employee bisa memiliki beberapa role, misalnya cashier, courier, production
model Employee {
  //-------------------------- scalars --------------------------------

  salary Int?

  attendanceBonus Int?

  mealAllowance Int?

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  user User @relation(fields: [userId], references: [id])

  userId String @id

  branch Branch @relation(fields: [branchId], references: [id])

  branchId Int

  //-------------------------- m relations --------------------------------

  roles EmployeeRole[] //one employee can be cashier, courier or production at the same time 

  serviceOrder ServiceOrder[]

  activities ItemActivity[]

  attendances Attendance[]
  Delivery    Delivery[]

  @@map("Employees")
}

enum EmployeeRole {
  CASHIER
  COURIER
  PRODUCTION

  @@map("EmployeeRoles")
}

//CRUD for UI
/// Address adalah alamat dari user dan cabang
model Address {
  //-------------------------- scalars --------------------------------
  id Int @id @default(autoincrement())

  latitude Float? //for google map

  longitude Float? //for google map

  label String

  street String

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------
  Branch Branch?

  user User? @relation(fields: [userId], references: [id])

  userId String?

  /// @Validator.IsNotEmpty()
  subdistrict Subdistrict @relation("SubdistrictAddress", fields: [subdistrictId], references: [id])

  // @HideField({ match: 'AddressCreate*Input' })
  subdistrictId Int

  //-------------------------- m relations --------------------------------

  platformOrder PlatformOrder[]

  serviceOrder ServiceOrder[]

  @@map("Addresses")
}

enum ItemActivity {
  LABELLING
  SORTING
  CLEANING
  SPOTTING
  DETAILLING
  DRYING
  IRONING
  FOLDING
  PACKING

  @@map("ItemActivities")
}

//CRUD for UI
model CreditCard {
  id             Int       @id @default(autoincrement())
  isAccepted     Boolean
  lastChecked    DateTime?
  cardHolderName String
  customer       Customer? @relation(fields: [customerId], references: [userId])
  customerId     String?
  owner          Owner?    @relation(fields: [ownerId], references: [userId])
  ownerId        String?
  cardNumber     String    @unique
  expMonth       Int
  expYear        Int
  cvv            String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

//-----------------------------------Account----------------------------------------------

model Account {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  accountNumber Float?

  /// @Validator.MinLength(2)
  /// @Validator.MaxLength(20)
  /// @Validator.IsAlpha()
  name String

  /// @HideField({ output: false, input: true })
  createdAt DateTime @default(now())

  /// @HideField({ output: false, input: true })
  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  accountCategory AccountCategory

  user User @relation(fields: [userId], references: [id])

  userId String

  //-------------------------- m relations --------------------------------

  /// Field untuk menampung transaksi keluar (credit)
  /// @HideField({ match: 'AccountCreate*Input' })
  transactionOrigins Transaction[] @relation("origin")

  /// Field untuk menampung transaksi masuk (debit)
  /// @HideField({ match: 'AccountCreate*Input' })
  transactionDestination Transaction[] @relation("destination")

  @@map("Accounts")
}

enum AccountCategory {
  COMISSION
  CASH
  PLATFORM
  BANK
  DEBT
  POINT

  @@map("AccountCategories")
}

//Make Read only without update, delete
/// Penerapan double entry accounting
model Transaction {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  /// @Validator.IsNumber() 
  /// @Validator.IsNotEmpty()
  amount Float

  /// Kode unik akan diiisi oleh backend
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  uniqueCode Int?

  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  createdAt DateTime @default(now())

  //-------------------------- 1 relations --------------------------------

  proofImage Image? @relation(fields: [proofImageId], references: [url])

  proofImageId String?

  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})     
  status TransactionStatus

  transactionCategory TransactionCategory

  /// Jika terisi dengan id transaksi yang sama, maka artinya transaksi ini adalah transaksi debit
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  fromAccount Account @relation("origin", fields: [fromAccountId], references: [id])

  /// Jika terisi dengan id transaksi yang sama, maka artinya transaksi ini adalah transaksi credit
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})  
  fromAccountId Int

  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})  
  toAccount Account @relation("destination", fields: [toAccountId], references: [id])

  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})  
  toAccountId Int

  invoice Invoice? @relation(fields: [invoiceId], references: [id])

  invoiceId Int?

  Payment Payment?

  paymentId Int?

  @@index([amount], name: "amount")
  @@index([fromAccountId], name: "from_account_id")
  @@index([toAccountId], name: "to_account_id")
  @@index([createdAt], name: "created_at")
  @@map("Transactions")
}

enum TransactionCategory {
  ORDER
  WITHDRAWAL
  TOPUP
  REFERRING
  REDEEMING
  REFUND
  RECONCILE
  COMISSION

  @@map("TransactionCategories")
}

enum TransactionStatus {
  PROCESSING
  PENDING
  FAILED
  CANCELLED
  COMPLETED

  @@map("TransactionStatuses")
}

//Make CRU Available, cannot be deleted
/// Invoice adalah tagihan yang harus dibayar oleh order
model Invoice {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  /// @Validator.IsNotEmpty()
  /// @Validator.IsNumber() 
  adminFee Float

  /// @Validator.IsNotEmpty()
  /// @Validator.IsNumber() 
  amount Float

  /// @HideField({ output: false, input: true })   
  uniqueCode Int

  /// @HideField({ output: false, input: true }) 
  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  status PaymentStatus

  /// @HideField({ match: 'InvoiceUpdate*Input' })
  serviceOrder ServiceOrder? @relation(fields: [serviceOrderId], references: [id])

  serviceOrderId Int?

  /// @HideField({ match: 'InvoiceUpdate*Input' })
  platformOrder PlatformOrder? @relation(fields: [platformOrderId], references: [id])

  platformOrderId Int?

  //-------------------------- m relation --------------------------------

  /// @HideField({ match: 'InvoiceUpdate*Input' })
  transactions Transaction[]

  @@map("Invoices")
}

enum PaymentStatus {
  PENDING
  UNPAID
  HALFPAID
  FULLPAID
  CANCELLED
  FAILED
  REFUNDED

  @@map("PaymentStatuses")
}

//-----------------------------------Addresses--------------------------------------------

//CRUD for UI
//CRUD only available for owner user
/// Branch adalah cabang dari laundry
model Branch {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  name String

  isActive Boolean @default(true)

  description String?

  phone String?

  email String?

  createdAt DateTime @default(now())

  updatedAt DateTime

  //-------------------------- 1 relations --------------------------------

  owner Owner @relation(fields: [ownerId], references: [userId])

  ownerId String

  address Address @relation(fields: [addressId], references: [id])

  addressId Int @unique

  //-------------------------- m relations --------------------------------

  image Image[]

  orders ServiceOrder[]

  bussinessHours BusinessHour[]

  employees Employee[]

  reviews Review[]

  schedules Schedule[]

  services BranchLaundryItemService[]

  customers Customer[]

  machines Machine[]

  @@map("Branches")
}

//CRUD for UI
//CRUD Only available for branch owner
/// BranchLaundryItemService adalah layanan yang disediakan oleh cabang
model BranchLaundryItemService {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  name String

  description String?

  durationInMinute Int?

  /// Maksimal berat per item dalam satuan sesuai unit of measure
  maxWeight Float?

  /// Minimal berat per item dalam satuan sesuai unit of measure
  minWeight Float?

  /// Harga pokok
  cost Int?

  /// Harga jual
  salePrice Int

  isActive Boolean @default(true)

  isOnSale Boolean @default(true)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  branch Branch @relation(fields: [branchId], references: [id])

  branchId Int

  laundryItem LaundryItem @relation(fields: [laundryItemId], references: [id])

  laundryItemId Int

  //-------------------------- m relations --------------------------------

  Images Image[]

  cart Cart[]

  ///branch can decide what are the activities involved in this service
  activities ItemActivity[]

  orderTypes OrderType[]

  ///Untuk layanan homeservice, branch dapat menentukan item apa saja yang dapat dilayani area mana saja 
  districtAreas District[]

  @@map("BranchLaundryItemServices")
}

//no update nor delete operation for UI
//CRUD only available to superUser
/// LaundryItem adalah pilihan item yang disediakan platform untuk diterapkan oleh cabang
model LaundryItem {
  //-------------------------- scalars --------------------------------
  id Int @id @default(autoincrement())

  name String

  description String?

  requiresDryCleaning Boolean? @default(false)

  requiresIron Boolean? @default(false)

  requiresFold Boolean? @default(false)

  requiresPack Boolean? @default(false)

  requiresHang Boolean? @default(false)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  category LaundryItemCategory @relation(fields: [categoryId], references: [id])

  categoryId Int

  unitOfMeasure UnitOfMeasure @relation(fields: [unitOfMeasureId], references: [id])

  unitOfMeasureId Int

  //-------------------------- relations --------------------------------

  images Image[]

  branchServices BranchLaundryItemService[]

  marketSalePrice MarketSalePriceHistory[]

  @@map("LaundryItems")
}

/// LaundryItemRequest adalah request dari cabang untuk menambahkan item laundry
model LaundryItemRequest {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  name String

  description String?

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  status LaundryItemRequestStatus

  requestBy Owner @relation(fields: [requestById], references: [userId])

  requestById String

  category LaundryItemCategory @relation(fields: [categoryId], references: [id])

  categoryId Int

  @@map("LaundryItemRequests")
}

enum LaundryItemRequestStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("LaundryItemRequestStatuses")
}

//backend cron job auto calculate from average market price (BranchLaundryService model)
/// MarketSalePriceHistory adalah history rata-rata harga jual di pasar dari item laundry
model MarketSalePriceHistory {
  //-------------------------- scalars --------------------------------
  id Int @id @default(autoincrement())

  price Float

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  laundry LaundryItem @relation(fields: [laundryItemId], references: [id])

  laundryItemId Int

  @@map("MarketSalePriceHistories")
}

//no update,delete operation for UI
//CRUD only available to superUser
/// LaundryItemCategory adalah kategori dari item laundry seperti pakaian, sepatu, tas, dll
model LaundryItemCategory {
  //-------------------------- scalars --------------------------------
  id Int @id @default(autoincrement())

  name String

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- m relations --------------------------------

  items LaundryItem[]

  LaundryItemRequest LaundryItemRequest[]

  @@map("LaundryItemCategories")
}

//no update,delete operation for UI
//CRUD only available to superUser
/// UnitOfMeasure adalah satuan dari item laundry seperti kg, pcs, dll
model UnitOfMeasure {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  name String

  abbreviation String?

  conversion Float @default(1.0)

  createdAt DateTime @default(now())

  updatedAt DateTime

  //-------------------------- m relations --------------------------------

  laundryItems LaundryItem[]

  platformItems PlatformItem[]

  @@map("UnitOfMeasures")
}

//no update,delete operation for UI
//CRUD only available to superUser
//items for selling to owner like platform subscription,machines, soaps etc
model PlatformItem {
  //-------------------------- scalars --------------------------------

  id String @id @default(cuid())

  name String

  cost Float?

  salePrice Float

  description String?

  /// Field ini juga digunakan backend sebagai penanda untuk mencegah race condition terjadi
  stock Int @default(0)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  UnitOfMeasure UnitOfMeasure @relation(fields: [unitOfMeasureId], references: [id])

  unitOfMeasureId Int

  //-------------------------- m relations --------------------------------

  carts Cart[]

  images Image[]

  @@map("PlatformItems")
}

//Can be created,read,edit but cannot be deleted by UI
/// PlatformOrder adalah order yang dibuat oleh owner untuk membeli item dari platform seperti subscription, mesin, dll
model PlatformOrder {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  address Address @relation(fields: [addressId], references: [id])

  addressId Int

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  /// Field ini digunakan backend sebagai penanda untuk mencegah race condition terjadi
  raceConditionVersion Int @default(0)

  //-------------------------- 1 relations --------------------------------

  orderBy Owner @relation(fields: [orderById], references: [userId])

  orderById String

  //-------------------------- m relations --------------------------------

  Invoice Invoice[]

  status OrderStatus[]

  carts Cart[]

  @@map("PlatformOrders")
}

//Only Read on UI
model OrderStatus {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  //-------------------------- 1 relations --------------------------------

  status OrderStatusEnum

  platformOrder PlatformOrder? @relation(fields: [platformOrderId], references: [id])

  platformOrderId Int?

  ServiceOrder ServiceOrder? @relation(fields: [ServiceOrderId], references: [id])

  ServiceOrderId Int?

  changedBy User @relation(fields: [changedById], references: [id])

  changedById String

  @@map("OrderStatuses")
}

//Can be created,read,edit but cannot be deleted for UI
/// ServiceOrder adalah order yang dibuat oleh customer
model ServiceOrder {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  platformFee Int

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  /// Field ini digunakan backend sebagai penanda untuk mencegah race condition terjadi
  /// Berkaitan dengan max order suatu branch tertentu
  raceConditionVersion Int @default(0)

  //-------------------------- 1 relations --------------------------------

  handleBy Employee? @relation(fields: [handleById], references: [userId])

  handleById String?

  orderBy Customer @relation(fields: [orderById], references: [userId])

  orderById String

  voucher Voucher? @relation(fields: [voucherId], references: [id])

  voucherId Int?

  address Address? @relation(fields: [addressId], references: [id])

  addressId Int?

  delivery Delivery? @relation(fields: [deliveryId], references: [id])

  deliveryId Int?

  orderType OrderType

  branch Branch @relation(fields: [brandId], references: [id])

  brandId Int

  //-------------------------- m relations --------------------------------

  status OrderStatus[]

  cart Cart[]

  Invoice Invoice[]

  @@map("ServiceOrders")
}

model Delivery {
  //-------------------------- scalars --------------------------------
  id Int @id @default(autoincrement())

  pickupTime DateTime?

  deliveryTime DateTime?

  pickupMessage String?

  deliveryMessage String?

  instructions String?

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  status DeliveryStatus @relation(fields: [deliveryStatusId], references: [id])

  deliveryStatusId Int

  assignedDriver Employee? @relation(fields: [assignedDriverId], references: [userId])

  assignedDriverId String?

  //-------------------------- m relations --------------------------------

  ServiceOrder ServiceOrder[]

  locationHistory DeliveryLocationHistory[]

  @@map("Deliveries")
}

model DeliveryLocationHistory {
  //-------------------------- scalars --------------------------------
  id Int @id @default(autoincrement())

  latitude Float

  longitude Float

  createdAt DateTime @default(now())

  //-------------------------- 1 relations --------------------------------

  delivery Delivery @relation(fields: [deliveryId], references: [id])

  deliveryId Int

  //-------------------------- m relations --------------------------------

  @@map("DeliveryLocationHistories")
}

model DeliveryStatus {
  //-------------------------- scalars --------------------------------
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  //-------------------------- 1 relations --------------------------------

  status DeliveryStatusEnum

  Delivery Delivery[]

  @@map("DeliveryStatuses")
}

enum DeliveryStatusEnum {
  PENDING
  ASSIGNED
  PICKEDUP
  DELIVERED
  CANCELLED

  @@map("DeliveryStatusEnums")
}

/// Cart adalah keranjang belanja user, Cart berisi item yang akan dibeli oleh user
model Cart {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  quantity Int

  /// @Validator.IsNumber() 
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  price Float

  /// @Validator.IsNumber() 
  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  cost Float

  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  createdAt DateTime @default(now())

  /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})   
  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  serviceOrder ServiceOrder? @relation(fields: [serviceOrderId], references: [id])

  serviceOrderId Int?

  PlatformOrder PlatformOrder? @relation(fields: [platformOrderId], references: [id])

  platformOrderId Int?

  PlatformItem PlatformItem? @relation(fields: [platformItemId], references: [id])

  platformItemId String?

  BranchLaundryItemService BranchLaundryItemService? @relation(fields: [branchLaundryItemServiceId], references: [id])

  branchLaundryItemServiceId Int?

  @@map("Carts")
}

enum OrderType {
  DROP
  SELF
  DELIVERY
  HOME

  @@map("OrderTypes")
}

enum OrderStatusEnum {
  PENDING
  PROCESSING
  DONE
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED

  @@map("OrderStatusEnums")
}

//Create and read only, no delete and no update for UI
/// Payment adalah pembayaran dari user untuk invoice
model Payment {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  amount Float

  createdAt DateTime @default(now())

  updatedAt DateTime

  //-------------------------- 1 relations --------------------------------

  method PaymentMethod

  status PaymentStatus

  transaction Transaction @relation(fields: [transactionId], references: [id])

  transactionId Int @unique

  @@map("Payments")
}

enum PaymentMethod {
  CASH
  QRIS
  CREDITCARD
  DEBITCARD
  EWALLET
  PLATFORMWALLET
  BANKTRANSFER

  @@map("PaymentMethods")
}

//CRUD for UI
//Update, Delete disable for owner
/// BranchReview adalah review yang diberikan oleh customer terhadap cabang
model Review {
  //-------------------------- scalars --------------------------------
  id Int @id @default(autoincrement())

  description String

  cleanlinessScore scale

  speedScore scale

  qualityScore scale

  priceScore scale

  overallAverageScore scale

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  reviewBy Customer @relation(fields: [reviewById], references: [userId])

  reviewById String

  branch Branch @relation(fields: [branchId], references: [addressId])

  branchId Int

  //-------------------------- m relations --------------------------------

  images Image[]

  message Message[]

  likes User[]

  dislikes User[]

  @@map("Reviews")
}

enum scale {
  ONE
  TWO
  THREE
  FOUR
  FIVE

  @@map("Scales")
}

//Create and Read only for UI
model Attendance {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  latitude Float

  longitude Float

  timeIn DateTime

  timeOut DateTime

  reason String?

  latePenalty Float?

  absentPenalty Float?

  overtimeBonus Float?

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  image Image? @relation(fields: [imageUrl], references: [url])

  imageUrl String?

  status EmployeeAttendanceStatus

  employee Employee @relation(fields: [employeeId], references: [userId])

  employeeId String

  @@map("Attendances")
}

enum EmployeeAttendanceStatus {
  PRESENT
  ABSENT
  OVERTIME
  LATE
  LEAVE
  HOLIDAY

  @@map("EmployeeAttendanceStatuses")
}

//CRUD for UI
//available for branch and owner only
/// BranchSchedule adalah jadwal operasional dari cabang
model Schedule {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  dayOfWeek Int @default(0)

  openTime String

  closeTime String

  branchId Int

  maxOrders Int?

  availableSlots Int?

  isClosed Boolean? @default(false)

  createdAt DateTime @default(now())

  updatedAt DateTime

  //-------------------------- 1 relations --------------------------------

  branch Branch @relation(fields: [branchId], references: [id])

  createdBy Owner @relation(fields: [createdById], references: [userId])

  createdById String

  @@map("Schedules")
}

model BusinessHour {
  //-------------------------- scalars --------------------------------
  id Int @id @default(autoincrement())

  openTime DateTime

  closeTime DateTime

  //-------------------------- 1 relations --------------------------------

  day Day

  //-------------------------- m relations --------------------------------

  branch Branch[]

  @@map("BusinessHours")
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY

  @@map("Days")
}

model Notification {
  //-------------------------- scalars --------------------------------
  id Int @id @default(autoincrement())

  title String

  subTitle String?

  content String

  createdAt DateTime @default(now())

  isRead Boolean

  fcmToken String?

  //-------------------------- 1 relations --------------------------------

  type NotificationType

  user User @relation(fields: [userId], references: [id])

  userId String

  //-------------------------- m relations --------------------------------

  @@map("Notifications")
}

enum NotificationType {
  ORDERSTATUS
  WASHINGMACHINESTATUS
  LAUNDRY
  DISCOUNT

  @@map("NotificationTypes")
}

//CRUD only for branch
///Machine adalah kumpulan mesin IOT yang ada pada cabang
model Machine {
  //-------------------------- scalars --------------------------------

  id string @id @default(uuid())

  name String

  description String?

  isOnline Boolean @default(false)

  capacity Int

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  capacityUnit UnitOfMeasure @relation(fields: [capacityUnitId], references: [id])

  capacityUnitId Int

  branch Branch @relation(fields: [branchId], references: [id])

  branchId Int

  status MachineStatus

  category MachineCategory? @relation(fields: [categoryId], references: [id])

  categoryId Int?

  //-------------------------- m relations --------------------------------

  Images Image[]

  @@map("Machines")
}

//No CRUD UI
model MachineCategory {
  id Int @id @default(autoincrement())

  name String

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  machines Machine[]

  @@map("MachineCategories")
}

enum MachineStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  BROKEN
  OTHER

  @@map("MachineStatuses")
}

//CRUD for UI
//Create, Read, Update for superUser, Read for Owner
/// Voucher adalah promo yang diberikan oleh platform kepada customer 
//TODO: Voucher dari platform, voucher dari cabang
model Voucher {
  //-------------------------- scalars --------------------------------

  /// Field ini diisi oleh 
  code String @id

  name String

  description String?

  startDate DateTime

  endDate DateTime

  minOrderValue Int?

  discountValue Int

  customerQuota Int?

  orderQuota Int?

  isActive Boolean @default(true)

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  discountType DiscountType

  image Image @relation(fields: [imageId], references: [url])

  imageId String

  //-------------------------- m relations --------------------------------

  /// Berisi order id yang menggunakan voucher ini
  serviceOrders ServiceOrder[]
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

model ChatRoom {
  //-------------------------- scalars --------------------------------
  id Int @id @default(autoincrement())

  name String

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  endedAt DateTime?

  //-------------------------- m relations --------------------------------

  participants User[]

  messages Message[]

  @@map("ChatRooms")
}

model Message {
  //-------------------------- scalars --------------------------------

  id Int @id @default(autoincrement())

  content String

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  //-------------------------- 1 relations --------------------------------

  sender User @relation("MessageSender", fields: [senderId], references: [id])

  senderId String

  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id])

  receiverId String

  chatRoom ChatRoom? @relation(fields: [chatRoomId], references: [id])

  chatRoomId Int?

  //-------------------------- m relations --------------------------------

  reads User[]

  likes User[]

  images Image[]

  @@map("Messages")
}
